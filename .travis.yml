language: python
dist: xenial
sudo: required
git:
  depth: false

# (Pre)Installation
matrix:
  include:
    - name: "Minimum requisites for Cosmology: gcc-6, Python 2.7"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-6
            - gfortran-6
            - g++-6
      env:
        - GCC_VERSION="6"
        - PYVER="2"
      python: "2.7"
    - name: "Typical scenario: latest Ubuntu LTS"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-7
            - gfortran-7
            - g++-7
      env:
        - GCC_VERSION="7"
        - PYVER="3"
      python: "3.6"
    - name: "Edge scenario: gcc-8, Python 3.7 with Anaconda"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-8
            - gfortran-8
            - g++-8
      env:
        - GCC_VERSION="8"
        - PYVER="3"
        - PYDIST="ANACONDA"
      python: "3.7"
before_install:
  # Configure right compilers version
  - mkdir -p gcc-symlinks ;
    ln -s /usr/bin/gfortran-$GCC_VERSION gcc-symlinks/gfortran ;
    ln -s /usr/bin/gcc-$GCC_VERSION gcc-symlinks/gcc ;
    ln -s /usr/bin/g++-$GCC_VERSION gcc-symlinks/g++ ;
    export PATH=$PWD/gcc-symlinks:$PATH ;
  - gfortran --version
  # Install rest of system requisites
  - sudo apt install openmpi-bin openmpi-common libopenmpi-dev libopenblas-dev liblapack-dev
  # Python requisites
  - if [[ "$PYDIST" == "ANACONDA" ]]; then
      wget https://repo.continuum.io/miniconda/Miniconda$PYVER-latest-Linux-x86_64.sh -O miniconda.sh;
      bash miniconda.sh -b -p $HOME/miniconda;
      export PATH="$HOME/miniconda/bin:$PATH";
      hash -r;
      conda config --set always_yes yes --set changeps1 no;
      conda info -a;
      conda create -q -n test-environment -c defaults python=$TRAVIS_PYTHON_VERSION scipy matplotlib cython PyYAML pytest-xdist flaky;
      source activate test-environment;
      pip install mpi4py;
    else
      pip install mpi4py pytest-xdist flaky matplotlib;
    fi
  - python --version
script:
  - export MODULES="../modules"
  # General tests:
  - echo "sampler: {polychord: }" > ../tmp.yaml
  - cobaya-install ../tmp.yaml --modules=$MODULES
  - pytest tests/ -k "not cosmo" --modules=$MODULES
  # Cosmology tests:
  - cobaya-install cosmo --modules=$MODULES --no-progress-bars
  - if [ -n "${CAMB_BRANCH}" ]; then
      rm -rf $MODULES/code/CAMB
      git clone --recursive -b $CAMB_BRANCH https://github.com/cmbant/CAMB $MODULES/code/CAMB
      python $MODULES/code/CAMB/setup.py build
    fi
  - pytest tests/ -v -s -k "cosmo" --modules=$MODULES --boxed
###############################################################################
deploy: # only if it builds and if the commit has been tagged
  provider: pypi
  user: JesusTorrado
  password:
    secure: FVCgqGT0sMJyvlY3sJFBwvO4RycAbWbVyHl4p9CG7XRSSgVOLGy9RZjAJkX8dJjH06fPNdQDYfkkj1PV8I42y0n4uqKkQ9RB63Yq6skbuuzjXLGQK9Xop10/1GDBhMHietDibzl8ZIuJyibdFYsc3rM/j8QcKjOYpDe10jO8K+dZaXsgAvqHk4P3d3ScG1u+X+wr8K6qik21YbTpiILS0LdUxmP4DWQw/7NKGWDX1b7sImRmvQfO20KuPTMu8pPz9ThZyPl6zEPgtKi2sQej5sgDlfim/heYk4W8Bf7bggS8GLseffssL5ru96eNUWT1OSbxnsEFqyyYepngNHPpvifflvtCiFU+3f7rzzcgYqmybhdM4ZEOk0pL5y/NS/rHn/1iW7Cqxs+GfUCbr9fWuBgKmVuDqEfvtSu83U1x6zz9C3R259Oe6n0vXfCGSfJqiHhsW8wuXx+bODyDaMAUn+gRSCLuqJVQzdcYwF2pGFf1WUH5iTQItUHZjYbAIXdnSqDKnvGalNDJdNsF3vwNEdbe8hFqfHMMzG73ZkkLOCjDW+mswIKYJUflxIyOdRqtB+XE056dA+c8Zwc4ktg4iss/O3ZBtUVPmba/ivpyYm7Fk8EUN/zY+24NK4iKk6z543rfx2w+wNXAuQiwgN2f+JshqI8kzTuCxPTgf2N49ME=
  on:
    tags: true
    python: '3.6'
    condition: "$GCC_VERSION = 7"
    branch: master
    repo: CobayaSampler/cobaya
###############################################################################
notifications:
  email:
    recipients:
      - secure: "A9QN+FT0GPqj7CBJFJwg00apoo0OV+oc7gE1PRgmpoRP9h7NHsVCAdg6+GRL05IuzF51R+Z76akTGUEf0KBYRQhk9O3XLpTBto6jb0Vp1RmxfPYnujh8c1pu9bxU/YTHVg/tGa8kAxR8KzBrVDGwmZaCDx8bY1Qg0Z7D1nNv5hlnEOyPLuppMf/3yd4Mv+sdkg7SzoPBG5y8AluCPfMcUy1LqklXYAlFAx6CSBs6P2J2CJCgjL1Gh/RHlQswtH9EVoLVKchtIuLu3abLxfOA8/QTc3YIRRyUyL5FcvuGjJnG5BCyOieJJXVWo2WPgSD9i6kyu81XzjG22MuMXVHp87m70sznpFz2sao8/dpAOFWVL82qABfcs6PfKPXIEy7uGsDzZiML92xBiguXoeOCqTNdLIgYsVtCIwhrGOLfoFH/0cxyf59l8LJmycq72Ahsq2SN6kgH+/KOO0XTg/QNjZOJsCoV2c9DJoogOTxW5xbZ52vWZUXMY/NMYyejx/xSryBogrx6cA5yB1T/Th0muXDKspATDAzBD0G55mLJBlE26LzmD1UJRW0l6wNgVEY1tqTcjtb4qOV074nhmGTeejwEDOOBmwfLsTRPAq+GX4LOh/9psMWHAAShY552Wg8W2/F7AhRkDZl446E4gmNGxkIQrklMmJOhUJRseZIe5Nk="

