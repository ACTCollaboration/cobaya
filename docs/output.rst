Output
======

The results of a **cobaya** run are in all cases an *updated information* dictionary (interactive call) or file (shell call), plus the *products* generated by the sampler used.


Interactive call
----------------

The *updated information* and *products* mentioned above are returned by the ``run`` function of the ``cobaya.run`` module, which performs the sampling process.

.. code:: python

    from cobaya.run import run
    updated_info, products = run(your_input)

``products`` here is a dictionary whose contents depend on the sampler used, e.g. one chain for the ``mcmc`` sampler.

If the input information contains a non-null ``output_prefix``, products are written to the hard drive too, as described below.


.. _output_shell:

Shell call
----------

When called from the shell, **cobaya** generates most commonly the following output files:

- ``[prefix__]input.yaml``: a file with the same content as the input file.
- ``[prefix__]full.yaml``: a file containing the input information plus the default values used by each module.    
- ``[prefix_][number].txt``: one or more sample files, containing one sample per line, with values separated by spaces. The first line specifies the columns.

.. note::

   Some samplers produce additional output, e.g. :doc:`PolyChord <sampler_polychord>`. In those cases, the resulting output is translated into **cobaya**'s output format, but the sampler's native output is kept too, usually under sub-folder within the output folder indicated with ``output_prefix`` (see the documentation for the particular sampler that you are using).

To specify the folder where the output files will be written and their name, use the option ``output_prefix`` at the *top-level* of the input file (i.e. not inside any block, see the example input in the :doc:`example`):

- ``output_prefix: something``: the output will be written into the current folder, and all output file names will start with ``something``.
- ``output_prefix: somefolder/something``: similar to the last case, but writes into the folder ``somefolder``, which is created at that point if necessary.
- ``output_prefix: somefolder/``: writes into the folder ``somefolder``, which is created at that point if necessary, with no prefix for the file names.
- ``output_prefix: null``: will produce no output files whatsoever -- the products will be just loaded in memory. Use only when invoking from the Python interpreter.

.. note::

   **When calling from the command line**, if ``output_prefix`` has not been specified, it
   defaults to the first case, using as a prefix the name of the input file sans the ``yaml`` extension.

   Instead, **when calling from a Python interpreter**, if ``output_prefix`` has not been specified, it is understood as ``output_prefix: null``.


In all cases, the output folder is based on the invocation folder if **cobaya** is called from the command line, or the *current working directory* (i.e. the output of ``import os; os.getcwd()``) if invoked within a Python script or a Jupyter notebook.

Whatever the prefix for the output files, the (potential) output files must not already exist, unless you are resuming from a previous sample (see :ref:`input_cont`).

.. note::

   When the output is written into a certain folder different from the invocation one, the value of ``output_prefix`` in the output ``.yaml`` file(s) is updated such that it drops the mention to that folder. This is done for consistency when resuming a sample (see :ref:`input_cont`), so that the automatically generated ``[prefix__]full.yaml`` file can be used as the input.
